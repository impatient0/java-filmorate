CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    login VARCHAR(255) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    birthday DATE
);

CREATE TABLE IF NOT EXISTS mpa_ratings (
    mpa_id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS films (
    film_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(200),
    release_date DATE,
    duration INTEGER,
    mpa_rating_id SMALLINT REFERENCES mpa_ratings(mpa_id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS genres (
    genre_id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS film_genres (
    film_id BIGINT NOT NULL,
    genre_id SMALLINT NOT NULL,
    PRIMARY KEY (film_id, genre_id),
    FOREIGN KEY (film_id) REFERENCES films(film_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genres(genre_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS friendships (
    user_id BIGINT NOT NULL,
    friend_id BIGINT NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'PENDING',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, friend_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CHECK (user_id <> friend_id)
);

CREATE TABLE IF NOT EXISTS ratings (
    user_id BIGINT NOT NULL,
    film_id BIGINT NOT NULL,
    rating_value INT NOT NULL,
    rated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, film_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (film_id) REFERENCES films(film_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS item_diff (
    film_id1 BIGINT NOT NULL,
    film_id2 BIGINT NOT NULL,
    diff_value DOUBLE PRECISION NOT NULL,
    PRIMARY KEY (film_id1, film_id2),
    FOREIGN KEY (film_id1) REFERENCES films(film_id) ON DELETE CASCADE,
    FOREIGN KEY (film_id2) REFERENCES films(film_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS item_freq (
    film_id1 BIGINT NOT NULL,
    film_id2 BIGINT NOT NULL,
    freq_value INTEGER NOT NULL,
    PRIMARY KEY (film_id1, film_id2),
    FOREIGN KEY (film_id1) REFERENCES films(film_id) ON DELETE CASCADE,
    FOREIGN KEY (film_id2) REFERENCES films(film_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS directors (
    director_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS film_directors (
    film_id BIGINT NOT NULL,
    director_id BIGINT NOT NULL,
    PRIMARY KEY (film_id, director_id),
    FOREIGN KEY (film_id) REFERENCES films(film_id) ON DELETE CASCADE,
    FOREIGN KEY (director_id) REFERENCES directors(director_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS reviews (
    review_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content VARCHAR(1000) NOT NULL,
    is_positive BOOLEAN NOT NULL,
    user_id BIGINT NOT NULL,
    film_id BIGINT NOT NULL,
    useful INTEGER DEFAULT 0,
    CONSTRAINT fk_reviews_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_reviews_film FOREIGN KEY (film_id) REFERENCES films(film_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_likes (
    review_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    like_value INTEGER NOT NULL,
    PRIMARY KEY (review_id, user_id),
    CONSTRAINT fk_review_likes_review FOREIGN KEY (review_id) REFERENCES reviews(review_id) ON DELETE CASCADE,
    CONSTRAINT fk_review_likes_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS events (
    event_id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS operations (
    operation_id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS user_feed (
    feed_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    event_id SMALLINT NOT NULL,
    operation_id SMALLINT NOT NULL,
    entity_id BIGINT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (event_id) REFERENCES events(event_id) ON DELETE CASCADE,
    FOREIGN KEY (operation_id) REFERENCES operations(operation_id) ON DELETE CASCADE
);

INSERT INTO mpa_ratings (name)
SELECT 'G' WHERE NOT EXISTS (SELECT 1 FROM mpa_ratings WHERE name = 'G');
INSERT INTO mpa_ratings (name)
SELECT 'PG' WHERE NOT EXISTS (SELECT 1 FROM mpa_ratings WHERE name = 'PG');
INSERT INTO mpa_ratings (name)
SELECT 'PG-13' WHERE NOT EXISTS (SELECT 1 FROM mpa_ratings WHERE name = 'PG-13');
INSERT INTO mpa_ratings (name)
SELECT 'R' WHERE NOT EXISTS (SELECT 1 FROM mpa_ratings WHERE name = 'R');
INSERT INTO mpa_ratings (name)
SELECT 'NC-17' WHERE NOT EXISTS (SELECT 1 FROM mpa_ratings WHERE name = 'NC-17');

INSERT INTO genres (name)
SELECT 'Комедия' WHERE NOT EXISTS (SELECT 1 FROM genres WHERE name = 'Комедия');
INSERT INTO genres (name)
SELECT 'Драма' WHERE NOT EXISTS (SELECT 1 FROM genres WHERE name = 'Драма');
INSERT INTO genres (name)
SELECT 'Мультфильм' WHERE NOT EXISTS (SELECT 1 FROM genres WHERE name = 'Мультфильм');
INSERT INTO genres (name)
SELECT 'Триллер' WHERE NOT EXISTS (SELECT 1 FROM genres WHERE name = 'Триллер');
INSERT INTO genres (name)
SELECT 'Документальный' WHERE NOT EXISTS (SELECT 1 FROM genres WHERE name = 'Документальный');
INSERT INTO genres (name)
SELECT 'Боевик' WHERE NOT EXISTS (SELECT 1 FROM genres WHERE name = 'Боевик');

INSERT INTO events (name)
SELECT 'LIKE' WHERE NOT EXISTS (SELECT 1 FROM events WHERE name = 'LIKE');
INSERT INTO events (name)
SELECT 'REVIEW' WHERE NOT EXISTS (SELECT 1 FROM events WHERE name = 'REVIEW');
INSERT INTO events (name)
SELECT 'FRIEND' WHERE NOT EXISTS (SELECT 1 FROM events WHERE name = 'FRIEND');

INSERT INTO operations (name)
SELECT 'REMOVE' WHERE NOT EXISTS (SELECT 1 FROM operations WHERE name = 'REMOVE');
INSERT INTO operations (name)
SELECT 'ADD' WHERE NOT EXISTS (SELECT 1 FROM operations WHERE name = 'ADD');
INSERT INTO operations (name)
SELECT 'UPDATE' WHERE NOT EXISTS (SELECT 1 FROM operations WHERE name = 'UPDATE');